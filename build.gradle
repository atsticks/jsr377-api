/*
 * Copyright 2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.text.SimpleDateFormat

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
        classpath 'org.ajoberstar:gradle-git:1.3.2'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.12.0'
    }
}

Date buildTimeAndDate = new Date()
ext {
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
}

allprojects {
    apply plugin: 'base'
    apply plugin: 'idea'
    apply plugin: 'com.github.ben-manes.versions'

    repositories {
        jcenter()
    }

    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }

    idea {
        project {
            jdkName rootProject.sourceCompatibility
            languageLevel rootProject.sourceCompatibility
        }
    }
}

subprojects { subproj ->
    plugins.withType(JavaPlugin) {
        configurations {
            compileOnly
            testCompileOnly
        }

        subproj.tasks.withType(JavaCompile) {
            sourceCompatibility = rootProject.sourceCompatibility
            targetCompatibility = rootProject.sourceCompatibility
        }

        dependencies {
            testCompile 'junit:junit:4.12'
        }

        task sourcesJar(type: Jar) {
            group 'Build'
            description 'An archive of the source code'
            classifier 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar) {
            group 'Build'
            description 'An archive of the javadoc'
            classifier 'javadoc'
            from javadoc.destinationDir
        }

        artifacts {
            sourcesJar
            javadocJar
        }

        javadoc {
            excludes = ['**/*.html', 'META-INF/**', '**/*.groovy']

            options.use         = true
            options.splitIndex  = true
            options.encoding    = 'UTF-8'
            options.author      = true
            options.version     = true
            options.windowTitle = "$subproj.name $version"
            options.docTitle    = "$subproj.name $version"
            options.footer      = rootProject.javadocFooter
            options.links       = ['http://docs.oracle.com/javase/7/docs/api/']
        }

        subproj.apply from: rootProject.file('gradle/publishing.gradle')
        subproj.apply from: rootProject.file('gradle/code-quality.gradle')
        subproj.apply from: rootProject.file('gradle/code-coverage.gradle')
    }
}